<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="AnacondaSpokeWindow">
<refmeta>
<refentrytitle role="top_of_page" id="AnacondaSpokeWindow.top_of_page">AnacondaSpokeWindow</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ANACONDAWIDGETS Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>AnacondaSpokeWindow</refname>
<refpurpose>Window for displaying single spokes</refpurpose>
</refnamediv>

<refsect1 id="AnacondaSpokeWindow.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="anaconda-spoke-window-new">anaconda_spoke_window_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeWindow.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="signals_return" colwidth="150px"/>
<colspec colname="signals_name" colwidth="300px"/>
<colspec colname="signals_flags" colwidth="200px"/>
<tbody>
<row><entry role="signal_type"><link linkend="void"><returnvalue>void</returnvalue></link></entry><entry role="signal_name"><link linkend="AnacondaSpokeWindow-button-clicked">button-clicked</link></entry><entry role="signal_flags"><link linkend="G-SIGNAL-ACTION:CAPS">Action</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeWindow.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="AnacondaSpokeWindow-struct">AnacondaSpokeWindow</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="AnacondaSpokeWindowClass">AnacondaSpokeWindowClass</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeWindow.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkWidget">GtkWidget</link>
            <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkContainer">GtkContainer</link>
                <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkBin">GtkBin</link>
                    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="AnacondaBaseWindow">AnacondaBaseWindow</link>
                        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> AnacondaSpokeWindow
</screen>
</refsect1>
<refsect1 id="AnacondaSpokeWindow.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
AnacondaSpokeWindow implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkBuildable">GtkBuildable</link>.</para>

</refsect1>


<refsect1 id="AnacondaSpokeWindow.description" role="desc">
<title role="desc.title">Description</title>
<para>A <link linkend="AnacondaSpokeWindow"><type>AnacondaSpokeWindow</type></link> is a widget that displays a single spoke on the
screen.  Examples include the keyboard and language configuration screens
off the first hub.</para>
<para>The AnacondaSpokeWindow consists of two areas:</para>
<itemizedlist>
<listitem>
<para>A navigation area in the top of the screen, inherited from <link linkend="AnacondaBaseWindow"><type>AnacondaBaseWindow</type></link>
and augmented with a button in the upper left corner.</para>
</listitem>
<listitem>
<para>An action area in the rest of the screen, taking up a majority of the
space.  This is where widgets will be added and the user will do things.</para>
</listitem>
</itemizedlist>
<refsect2><title>CSS nodes</title><informalexample><programlisting role="example"><![CDATA[
AnacondaSpokeWindow
╰── #anaconda-spoke-window-button
]]></programlisting></informalexample>
<para></para>
<para>The button in the upper left is accessible as the name
"anaconda-spoke-window-button" for the purposes of CSS selectors.</para>
</refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeWindow.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="anaconda-spoke-window-new" role="function">
<title>anaconda_spoke_window_new&#160;()</title>
<indexterm zone="anaconda-spoke-window-new"><primary>anaconda_spoke_window_new</primary></indexterm>
<programlisting language="C"><link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link>&#160;*
anaconda_spoke_window_new ();</programlisting>
<para>Creates a new <link linkend="AnacondaSpokeWindow"><type>AnacondaSpokeWindow</type></link>, which is a window designed for
displaying a single spoke, such as the keyboard or network configuration
screens.</para>
<refsect3 id="anaconda-spoke-window-new.returns" role="returns">
<title>Returns</title>
<para> A new <link linkend="AnacondaSpokeWindow"><type>AnacondaSpokeWindow</type></link>.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeWindow.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="AnacondaSpokeWindow-struct" role="struct">
<title>struct AnacondaSpokeWindow</title>
<indexterm zone="AnacondaSpokeWindow-struct"><primary>AnacondaSpokeWindow</primary></indexterm>
<programlisting language="C">struct AnacondaSpokeWindow;</programlisting>
<para>The AnacondaSpokeWindow struct contains only private fields and should not
be directly accessed.</para>
</refsect2>
<refsect2 id="AnacondaSpokeWindowClass" role="struct">
<title>struct AnacondaSpokeWindowClass</title>
<indexterm zone="AnacondaSpokeWindowClass"><primary>AnacondaSpokeWindowClass</primary></indexterm>
<programlisting language="C">struct AnacondaSpokeWindowClass {
    AnacondaBaseWindowClass parent_class;

    void (* button_clicked)  (AnacondaSpokeWindow *window);
};
</programlisting>
<refsect3 id="AnacondaSpokeWindowClass.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row role="member"><entry role="struct_member_name"><para><structfield id="AnacondaSpokeWindowClass.button-clicked">button_clicked</structfield>&#160;()</para></entry>
<entry role="struct_member_description"><para>Function pointer called when the <link linkend="AnacondaSpokeWindow-button-clicked"><type>“button-clicked”</type></link>
signal is emitted.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeWindow.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="AnacondaSpokeWindow-button-clicked" role="signal"><title>The <literal>“button-clicked”</literal> signal</title>
<indexterm zone="AnacondaSpokeWindow-button-clicked" role="1.0"><primary>AnacondaSpokeWindow::button-clicked</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
user_function (<link linkend="AnacondaSpokeWindow"><type>AnacondaSpokeWindow</type></link> *window,
               <link linkend="gpointer"><type>gpointer</type></link>             user_data)</programlisting>
<para>Emitted when the button in the upper left corner has been activated
(pressed and released).  This is commonly the button that takes the user
back to the hub, but could do other things.  Note that we do not want
to trap people in spokes, so there should always be a way back to the
hub via this signal, even if it involves canceling some operation or
resetting things.</para>
<refsect3 id="AnacondaSpokeWindow-button-clicked.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>window</para></entry>
<entry role="parameter_description"><para>the window that received the signal</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><simpara>user_data</simpara></entry>
<entry role="parameter_description"><simpara>user data set when the signal handler was connected.</simpara></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para>Flags: <link linkend="G-SIGNAL-ACTION:CAPS">Action</link></para>
<para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>
</refsect1>

</refentry>
