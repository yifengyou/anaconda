<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="AnacondaSpokeSelector">
<refmeta>
<refentrytitle role="top_of_page" id="AnacondaSpokeSelector.top_of_page">AnacondaSpokeSelector</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ANACONDAWIDGETS Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>AnacondaSpokeSelector</refname>
<refpurpose>A graphical way to enter a configuration spoke</refpurpose>
</refnamediv>

<refsect1 id="AnacondaSpokeSelector.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="anaconda-spoke-selector-new">anaconda_spoke_selector_new</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="anaconda-spoke-selector-get-incomplete">anaconda_spoke_selector_get_incomplete</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="anaconda-spoke-selector-set-incomplete">anaconda_spoke_selector_set_incomplete</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeSelector.properties" role="properties">
<title role="properties.title">Properties</title>
<informaltable frame="none">
<tgroup cols="3">
<colspec colname="properties_type" colwidth="150px"/>
<colspec colname="properties_name" colwidth="300px"/>
<colspec colname="properties_flags" colwidth="200px"/>
<tbody>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="AnacondaSpokeSelector--icon">icon</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="AnacondaSpokeSelector--status">status</link></entry><entry role="property_flags">Read / Write</entry></row>
<row><entry role="property_type"><link linkend="gchar"><type>gchar</type></link>&#160;*</entry><entry role="property_name"><link linkend="AnacondaSpokeSelector--title">title</link></entry><entry role="property_flags">Read / Write</entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeSelector.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="AnacondaSpokeSelector-struct">AnacondaSpokeSelector</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="AnacondaSpokeSelectorClass">AnacondaSpokeSelectorClass</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="AnacondaSpokeSelector.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<screen>    <link linkend="GObject">GObject</link>
    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkWidget">GtkWidget</link>
            <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkContainer">GtkContainer</link>
                <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkBin">GtkBin</link>
                    <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> <link linkend="GtkEventBox">GtkEventBox</link>
                        <phrase role="lineart">&#9584;&#9472;&#9472;</phrase> AnacondaSpokeSelector
</screen>
</refsect1>
<refsect1 id="AnacondaSpokeSelector.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
AnacondaSpokeSelector implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkBuildable">GtkBuildable</link>.</para>

</refsect1>


<refsect1 id="AnacondaSpokeSelector.description" role="desc">
<title role="desc.title">Description</title>
<para>A <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link> is a widget that is associated with a Spoke and
is packed into a grid on a Hub.  A Spoke allows the user to configure one
piece of system, and the associated selector both displays the current
configuration and allows for a place to click to do further configuration.</para>
<para>Some Spokes can have their initial configuration guessed, while others
(specifically storage) require the user to do something.  For those that
the user has not entered, the selector may be set as incomplete.  See
<link linkend="anaconda-spoke-selector-get-incomplete"><type>anaconda_spoke_selector_get_incomplete</type></link> and <link linkend="anaconda-spoke-selector-set-incomplete"><type>anaconda_spoke_selector_set_incomplete</type></link>.</para>
<para>As a <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link> is a subclass of a <link linkend="GtkEventBox"><type>GtkEventBox</type></link>, any signals
may be caught.  However ::button-press-event is the most important one and
should be how control is transferred to a Spoke.</para>
<refsect2><title>CSS nodes</title><informalexample><programlisting role="example"><![CDATA[
AnacondaSpokeSelector
├── #anaconda-spoke-selector-title
╰── #anaconda-spoke-selector-status
]]></programlisting></informalexample>
<para></para>
<para>The internal widgets are accessible by name for the purposes of CSS
selectors</para>
<itemizedlist>
<listitem>
<para>anaconda-spoke-selector-title</para>
<para>The title of the spoke</para>
</listitem>
<listitem>
<para>anaconda-spoke-selector-status</para>
<para>The status of the spoke</para>
</listitem>
</itemizedlist>
<para>In addition, the :indeterminate pseudo-class can be used to select
selectors that are in an error state. The :indeterminate pseudo-class is
also set on the anaconda-spoke-selector-title and
anaconda-spoke-selector-status labels.</para>
</refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeSelector.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="anaconda-spoke-selector-new" role="function">
<title>anaconda_spoke_selector_new&#160;()</title>
<indexterm zone="anaconda-spoke-selector-new"><primary>anaconda_spoke_selector_new</primary></indexterm>
<programlisting language="C"><link linkend="GtkWidget"><returnvalue>GtkWidget</returnvalue></link>&#160;*
anaconda_spoke_selector_new ();</programlisting>
<para>Creates a new <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link>, which is a selectable display for a
single spoke of an Anaconda hub.  Many spokes may be put together into a
grid, displaying everything that a user needs to do in one place.</para>
<refsect3 id="anaconda-spoke-selector-new.returns" role="returns">
<title>Returns</title>
<para> A new <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link>.</para>
</refsect3></refsect2>
<refsect2 id="anaconda-spoke-selector-get-incomplete" role="function" condition="since:1.0">
<title>anaconda_spoke_selector_get_incomplete&#160;()</title>
<indexterm zone="anaconda-spoke-selector-get-incomplete" role="1.0"><primary>anaconda_spoke_selector_get_incomplete</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
anaconda_spoke_selector_get_incomplete
                               (<parameter><link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link> *spoke</parameter>);</programlisting>
<para>Returns whether or not this spoke has been completed.</para>
<refsect3 id="anaconda-spoke-selector-get-incomplete.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>spoke</para></entry>
<entry role="parameter_description"><para>a <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="anaconda-spoke-selector-get-incomplete.returns" role="returns">
<title>Returns</title>
<para> Whether <parameter>spoke</parameter>
has been completed by the user.</para>
</refsect3><para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>
<refsect2 id="anaconda-spoke-selector-set-incomplete" role="function" condition="since:1.0">
<title>anaconda_spoke_selector_set_incomplete&#160;()</title>
<indexterm zone="anaconda-spoke-selector-set-incomplete" role="1.0"><primary>anaconda_spoke_selector_set_incomplete</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
anaconda_spoke_selector_set_incomplete
                               (<parameter><link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link> *spoke</parameter>,
                                <parameter><link linkend="gboolean"><type>gboolean</type></link> is_incomplete</parameter>);</programlisting>
<para>Specifies whether this spoke must still be visited by the user.  If so, this
means anaconda doesn't have enough information to continue and the user must
take some action.  A warning icon will be displayed alongside the spoke's
icon, and the continue button will be disabled.</para>
<refsect3 id="anaconda-spoke-selector-set-incomplete.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>spoke</para></entry>
<entry role="parameter_description"><para>a <link linkend="AnacondaSpokeSelector"><type>AnacondaSpokeSelector</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>is_incomplete</para></entry>
<entry role="parameter_description"><para><link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if this spoke still needs to be visited.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeSelector.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="AnacondaSpokeSelector-struct" role="struct">
<title>struct AnacondaSpokeSelector</title>
<indexterm zone="AnacondaSpokeSelector-struct"><primary>AnacondaSpokeSelector</primary></indexterm>
<programlisting language="C">struct AnacondaSpokeSelector;</programlisting>
<para>The AnacondaSpokeSelector struct contains only private fields and should
not be directly accessed.</para>
</refsect2>
<refsect2 id="AnacondaSpokeSelectorClass" role="struct">
<title>struct AnacondaSpokeSelectorClass</title>
<indexterm zone="AnacondaSpokeSelectorClass"><primary>AnacondaSpokeSelectorClass</primary></indexterm>
<programlisting language="C">struct AnacondaSpokeSelectorClass {
    GtkEventBoxClass parent_class;
};
</programlisting>
<refsect3 id="AnacondaSpokeSelectorClass.members" role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>
<refsect1 id="AnacondaSpokeSelector.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="AnacondaSpokeSelector--icon" role="property"><title>The <literal>“icon”</literal> property</title>
<indexterm zone="AnacondaSpokeSelector--icon" role="1.0"><primary>AnacondaSpokeSelector:icon</primary></indexterm>
<programlisting>  “icon”                     <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The <link linkend="AnacondaSpokeSelector--icon"><type>“icon”</type></link> string is the standard icon name for an icon to display
beside this spoke's :title.  It is strongly suggested that one of the
"-symbolic" icons be used, as that is consistent with the style we
are going for.</para>
<para>Flags: Read / Write</para>
<para>Default value: "image-missing"</para>
<para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>
<refsect2 id="AnacondaSpokeSelector--status" role="property"><title>The <literal>“status”</literal> property</title>
<indexterm zone="AnacondaSpokeSelector--status" role="1.0"><primary>AnacondaSpokeSelector:status</primary></indexterm>
<programlisting>  “status”                   <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The <link linkend="AnacondaSpokeSelector--status"><type>“status”</type></link> string is text displayed underneath
the spoke's <link linkend="AnacondaSpokeSelector--title"><type>“title”</type></link> and also beside the
<link linkend="AnacondaSpokeSelector--icon"><type>“icon”</type></link>.  This text very briefly describes what has
been selected on the spoke associated with this selector.  For instance,
it might be set up to "English" for a language-related spoke.  Special
formatting will be applied to error status text for incomplete spokes.</para>
<para>Flags: Read / Write</para>
<para>Default value: "None"</para>
<para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>
<refsect2 id="AnacondaSpokeSelector--title" role="property"><title>The <literal>“title”</literal> property</title>
<indexterm zone="AnacondaSpokeSelector--title" role="1.0"><primary>AnacondaSpokeSelector:title</primary></indexterm>
<programlisting>  “title”                    <link linkend="gchar"><type>gchar</type></link>&#160;*</programlisting>
<para>The :title of this selector, which will be displayed large and bold
beside the :icon.  The title string should contain a keyboard mnemonic
(a letter preceeded by an underscore), in which case this will be the
keystroke that can be used to focus this selector.</para>
<para>Flags: Read / Write</para>
<para>Default value: "New Selector"</para>
<para role="since">Since: <link linkend="api-index-1.0">1.0</link></para></refsect2>

</refsect1>

</refentry>
