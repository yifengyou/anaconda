<MACRO>
<NAME>ANACONDA_TYPE_BASE_STANDALONE</NAME>
#define ANACONDA_TYPE_BASE_STANDALONE            (anaconda_base_standalone_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_STANDALONE</NAME>
#define ANACONDA_BASE_STANDALONE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_BASE_STANDALONE, AnacondaBaseStandalone))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_BASE_STANDALONE</NAME>
#define ANACONDA_IS_BASE_STANDALONE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANACONDA_TYPE_BASE_STANDALONE))
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_STANDALONE_CLASS</NAME>
#define ANACONDA_BASE_STANDALONE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_BASE_STANDALONE, AnacondaBaseStandaloneClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_BASE_STANDALONE_CLASS</NAME>
#define ANACONDA_IS_BASE_STANDALONE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_BASE_STANDALONE))
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_STANDALONE_GET_CLASS</NAME>
#define ANACONDA_BASE_STANDALONE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_BASE_STANDALONE, AnacondaBaseStandaloneClass))
</MACRO>
<STRUCT>
<NAME>AnacondaBaseStandalone</NAME>
struct _AnacondaBaseStandalone {
    AnacondaBaseWindow             parent;

    /*< private >*/
    AnacondaBaseStandalonePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaBaseStandaloneClass</NAME>
struct _AnacondaBaseStandaloneClass {
    AnacondaBaseWindowClass parent_class;

    void (* quit_clicked)     (AnacondaBaseStandalone *window);
    void (* continue_clicked) (AnacondaBaseStandalone *window);
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_base_standalone_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_standalone_get_may_continue</NAME>
<RETURNS>gboolean     </RETURNS>
AnacondaBaseStandalone *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_standalone_set_may_continue</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseStandalone *win, gboolean may_continue
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_standalone_get_quit_button</NAME>
<RETURNS>GtkButton  * </RETURNS>
AnacondaBaseStandalone *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_standalone_get_continue_button</NAME>
<RETURNS>GtkButton  * </RETURNS>
AnacondaBaseStandalone *win
</FUNCTION>
<STRUCT>
<NAME>AnacondaBaseStandalonePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_BASE_WINDOW</NAME>
#define ANACONDA_TYPE_BASE_WINDOW            (anaconda_base_window_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_WINDOW</NAME>
#define ANACONDA_BASE_WINDOW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_BASE_WINDOW, AnacondaBaseWindow))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_BASE_WINDOW</NAME>
#define ANACONDA_IS_BASE_WINDOW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANACONDA_TYPE_BASE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_WINDOW_CLASS</NAME>
#define ANACONDA_BASE_WINDOW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_BASE_WINDOW, AnacondaBaseWindowClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_BASE_WINDOW_CLASS</NAME>
#define ANACONDA_IS_BASE_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_BASE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_BASE_WINDOW_GET_CLASS</NAME>
#define ANACONDA_BASE_WINDOW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_BASE_WINDOW, AnacondaBaseWindowClass))
</MACRO>
<STRUCT>
<NAME>AnacondaBaseWindow</NAME>
struct _AnacondaBaseWindow {
    GtkBin                     parent;

    /*< private >*/
    AnacondaBaseWindowPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaBaseWindowClass</NAME>
struct _AnacondaBaseWindowClass {
    GtkBinClass parent_class;

    void (* info_bar_clicked) (AnacondaBaseWindow *window);
    void (* help_button_clicked) (AnacondaBaseWindow *window);
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_base_window_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_retranslate</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_beta</NAME>
<RETURNS>gboolean     </RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_set_beta</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win, gboolean is_beta
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_set_error</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win, const char *msg
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_set_info</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win, const char *msg
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_set_warning</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win, const char *msg
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_clear_info</NAME>
<RETURNS>void         </RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_action_area</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_alignment</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_main_box</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_nav_area</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_nav_area_background_window</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<FUNCTION>
<NAME>anaconda_base_window_get_help_button</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaBaseWindow *win
</FUNCTION>
<STRUCT>
<NAME>AnacondaBaseWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_DISK_OVERVIEW</NAME>
#define ANACONDA_TYPE_DISK_OVERVIEW            (anaconda_disk_overview_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_DISK_OVERVIEW</NAME>
#define ANACONDA_DISK_OVERVIEW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_DISK_OVERVIEW, AnacondaDiskOverview))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_DISK_OVERVIEW</NAME>
#define ANACONDA_IS_DISK_OVERVIEW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj)), ANACONDA_TYPE_DISK_OVERVIEW)
</MACRO>
<MACRO>
<NAME>ANACONDA_DISK_OVERVIEW_CLASS</NAME>
#define ANACONDA_DISK_OVERVIEW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_DISK_OVERVIEW, AnacondaDiskOverviewClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_DISK_OVERVIEW_CLASS</NAME>
#define ANACONDA_IS_DISK_OVERVIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_DISK_OVERVIEW))
</MACRO>
<MACRO>
<NAME>ANACONDA_DISK_OVERVIEW_GET_CLASS</NAME>
#define ANACONDA_DISK_OVERVIEW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_DISK_OVERVIEW, AnacondaDiskOverviewClass))
</MACRO>
<STRUCT>
<NAME>AnacondaDiskOverview</NAME>
struct _AnacondaDiskOverview {
    GtkEventBox                  parent;

    /*< private >*/
    AnacondaDiskOverviewPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaDiskOverviewClass</NAME>
struct _AnacondaDiskOverviewClass {
    GtkEventBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_disk_overview_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_disk_overview_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_disk_overview_get_chosen</NAME>
<RETURNS>gboolean     </RETURNS>
AnacondaDiskOverview *widget
</FUNCTION>
<FUNCTION>
<NAME>anaconda_disk_overview_set_chosen</NAME>
<RETURNS>void         </RETURNS>
AnacondaDiskOverview *widget, gboolean is_chosen
</FUNCTION>
<STRUCT>
<NAME>AnacondaDiskOverviewPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_HUB_WINDOW</NAME>
#define ANACONDA_TYPE_HUB_WINDOW              (anaconda_hub_window_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_HUB_WINDOW</NAME>
#define ANACONDA_HUB_WINDOW(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_HUB_WINDOW, AnacondaHubWindow))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_HUB_WINDOW</NAME>
#define ANACONDA_IS_HUB_WINDOW(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANACONDA_TYPE_HUB_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_HUB_WINDOW_CLASS</NAME>
#define ANACONDA_HUB_WINDOW_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_HUB_WINDOW, AnacondaHubWindowClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_HUB_WINDOW_CLASS</NAME>
#define ANACONDA_IS_HUB_WINDOW_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_HUB_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_HUB_WINDOW_GET_CLASS</NAME>
#define ANACONDA_HUB_WINDOW_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_HUB_WINDOW, AnacondaHubWindowClass))
</MACRO>
<STRUCT>
<NAME>AnacondaHubWindow</NAME>
struct _AnacondaHubWindow {
    AnacondaBaseStandalone     parent;

    /*< private >*/
    AnacondaHubWindowPrivate  *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaHubWindowClass</NAME>
struct _AnacondaHubWindowClass {
    AnacondaBaseStandaloneClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_hub_window_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_hub_window_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_hub_window_get_spoke_area</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaHubWindow *win
</FUNCTION>
<STRUCT>
<NAME>AnacondaHubWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_LAYOUT_INDICATOR</NAME>
#define ANACONDA_TYPE_LAYOUT_INDICATOR            (anaconda_layout_indicator_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_LAYOUT_INDICATOR</NAME>
#define ANACONDA_LAYOUT_INDICATOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_LAYOUT_INDICATOR, AnacondaLayoutIndicator))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_LAYOUT_INDICATOR</NAME>
#define ANACONDA_IS_LAYOUT_INDICATOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj)), ANACONDA_TYPE_LAYOUT_INDICATOR)
</MACRO>
<MACRO>
<NAME>ANACONDA_LAYOUT_INDICATOR_CLASS</NAME>
#define ANACONDA_LAYOUT_INDICATOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_LAYOUT_INDICATOR, AnacondaLayoutIndicatorClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_LAYOUT_INDICATOR_CLASS</NAME>
#define ANACONDA_IS_LAYOUT_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_LAYOUT_INDICATOR))
</MACRO>
<MACRO>
<NAME>ANACONDA_LAYOUT_INDICATOR_GET_CLASS</NAME>
#define ANACONDA_LAYOUT_INDICATOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_LAYOUT_INDICATOR, AnacondaLayoutIndicatorClass))
</MACRO>
<STRUCT>
<NAME>AnacondaLayoutIndicator</NAME>
struct _AnacondaLayoutIndicator {
    /*< private >*/
    GtkEventBox                   parent;
    AnacondaLayoutIndicatorPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaLayoutIndicatorClass</NAME>
struct _AnacondaLayoutIndicatorClass {
    GtkEventBoxClass parent_class;

    /* this has to be a class attribute, because XklEngine is a singleton that
       should be used by all instances */
    XklEngine *engine;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_layout_indicator_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_layout_indicator_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_layout_indicator_get_current_layout</NAME>
<RETURNS>gchar       *</RETURNS>
AnacondaLayoutIndicator *indicator
</FUNCTION>
<FUNCTION>
<NAME>anaconda_layout_indicator_get_label_width</NAME>
<RETURNS>guint       </RETURNS>
AnacondaLayoutIndicator *indicator
</FUNCTION>
<FUNCTION>
<NAME>anaconda_layout_indicator_set_label_width</NAME>
<RETURNS>void        </RETURNS>
AnacondaLayoutIndicator *indicator, guint new_width
</FUNCTION>
<FUNCTION>
<NAME>anaconda_layout_indicator_retranslate</NAME>
<RETURNS>void        </RETURNS>
AnacondaLayoutIndicator *indicator
</FUNCTION>
<STRUCT>
<NAME>AnacondaLayoutIndicatorPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_MOUNTPOINT_SELECTOR</NAME>
#define ANACONDA_TYPE_MOUNTPOINT_SELECTOR            (anaconda_mountpoint_selector_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_MOUNTPOINT_SELECTOR</NAME>
#define ANACONDA_MOUNTPOINT_SELECTOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_MOUNTPOINT_SELECTOR, AnacondaMountpointSelector))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_MOUNTPOINT_SELECTOR</NAME>
#define ANACONDA_IS_MOUNTPOINT_SELECTOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj)), ANACONDA_TYPE_MOUNTPOINT_SELECTOR)
</MACRO>
<MACRO>
<NAME>ANACONDA_MOUNTPOINT_SELECTOR_CLASS</NAME>
#define ANACONDA_MOUNTPOINT_SELECTOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_MOUNTPOINT_SELECTOR, AnacondaMountpointSelectorClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_MOUNTPOINT_SELECTOR_CLASS</NAME>
#define ANACONDA_IS_MOUNTPOINT_SELECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_MOUNTPOINT_SELECTOR))
</MACRO>
<MACRO>
<NAME>ANACONDA_MOUNTPOINT_SELECTOR_GET_CLASS</NAME>
#define ANACONDA_MOUNTPOINT_SELECTOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_MOUNTPOINT_SELECTOR, AnacondaMountpointSelectorClass))
</MACRO>
<STRUCT>
<NAME>AnacondaMountpointSelector</NAME>
struct _AnacondaMountpointSelector {
    GtkEventBox                   parent;

    /*< private >*/
    AnacondaMountpointSelectorPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaMountpointSelectorClass</NAME>
struct _AnacondaMountpointSelectorClass {
    GtkEventBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_get_chosen</NAME>
<RETURNS>gboolean     </RETURNS>
AnacondaMountpointSelector *widget
</FUNCTION>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_set_chosen</NAME>
<RETURNS>void         </RETURNS>
AnacondaMountpointSelector *widget, gboolean is_chosen
</FUNCTION>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_get_page</NAME>
<RETURNS>GtkWidget   *</RETURNS>
AnacondaMountpointSelector *widget
</FUNCTION>
<FUNCTION>
<NAME>anaconda_mountpoint_selector_set_page</NAME>
<RETURNS>void         </RETURNS>
AnacondaMountpointSelector *widget, GtkWidget *parent_page
</FUNCTION>
<STRUCT>
<NAME>AnacondaMountpointSelectorPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_SPOKE_SELECTOR</NAME>
#define ANACONDA_TYPE_SPOKE_SELECTOR            (anaconda_spoke_selector_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_SELECTOR</NAME>
#define ANACONDA_SPOKE_SELECTOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_SPOKE_SELECTOR, AnacondaSpokeSelector))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_SPOKE_SELECTOR</NAME>
#define ANACONDA_IS_SPOKE_SELECTOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj)), ANACONDA_TYPE_SPOKE_SELECTOR)
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_SELECTOR_CLASS</NAME>
#define ANACONDA_SPOKE_SELECTOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_SPOKE_SELECTOR, AnacondaSpokeSelectorClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_SPOKE_SELECTOR_CLASS</NAME>
#define ANACONDA_IS_SPOKE_SELECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_SPOKE_SELECTOR))
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_SELECTOR_GET_CLASS</NAME>
#define ANACONDA_SPOKE_SELECTOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_SPOKE_SELECTOR, AnacondaSpokeSelectorClass))
</MACRO>
<STRUCT>
<NAME>AnacondaSpokeSelector</NAME>
struct _AnacondaSpokeSelector {
    GtkEventBox                   parent;

    /*< private >*/
    AnacondaSpokeSelectorPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaSpokeSelectorClass</NAME>
struct _AnacondaSpokeSelectorClass {
    GtkEventBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_spoke_selector_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_spoke_selector_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_spoke_selector_get_incomplete</NAME>
<RETURNS>gboolean     </RETURNS>
AnacondaSpokeSelector *spoke
</FUNCTION>
<FUNCTION>
<NAME>anaconda_spoke_selector_set_incomplete</NAME>
<RETURNS>void         </RETURNS>
AnacondaSpokeSelector *spoke, gboolean is_incomplete
</FUNCTION>
<STRUCT>
<NAME>AnacondaSpokeSelectorPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_SPOKE_WINDOW</NAME>
#define ANACONDA_TYPE_SPOKE_WINDOW              (anaconda_spoke_window_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_WINDOW</NAME>
#define ANACONDA_SPOKE_WINDOW(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_SPOKE_WINDOW, AnacondaSpokeWindow))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_SPOKE_WINDOW</NAME>
#define ANACONDA_IS_SPOKE_WINDOW(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANACONDA_TYPE_SPOKE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_WINDOW_CLASS</NAME>
#define ANACONDA_SPOKE_WINDOW_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_SPOKE_WINDOW, AnacondaSpokeWindowClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_SPOKE_WINDOW_CLASS</NAME>
#define ANACONDA_IS_SPOKE_WINDOW_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_SPOKE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_SPOKE_WINDOW_GET_CLASS</NAME>
#define ANACONDA_SPOKE_WINDOW_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_SPOKE_WINDOW, AnacondaSpokeWindowClass))
</MACRO>
<STRUCT>
<NAME>AnacondaSpokeWindow</NAME>
struct _AnacondaSpokeWindow {
    AnacondaBaseWindow           parent;

    /*< private >*/
    AnacondaSpokeWindowPrivate  *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaSpokeWindowClass</NAME>
struct _AnacondaSpokeWindowClass {
    AnacondaBaseWindowClass parent_class;

    void (* button_clicked)  (AnacondaSpokeWindow *window);
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_spoke_window_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_spoke_window_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<STRUCT>
<NAME>AnacondaSpokeWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_TYPE_STANDALONE_WINDOW</NAME>
#define ANACONDA_TYPE_STANDALONE_WINDOW              (anaconda_standalone_window_get_type())
</MACRO>
<MACRO>
<NAME>ANACONDA_STANDALONE_WINDOW</NAME>
#define ANACONDA_STANDALONE_WINDOW(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANACONDA_TYPE_STANDALONE_WINDOW, AnacondaStandaloneWindow))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_STANDALONE_WINDOW</NAME>
#define ANACONDA_IS_STANDALONE_WINDOW(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANACONDA_TYPE_STANDALONE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_STANDALONE_WINDOW_CLASS</NAME>
#define ANACONDA_STANDALONE_WINDOW_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), ANACONDA_TYPE_STANDALONE_WINDOW, AnacondaStandaloneWindowClass))
</MACRO>
<MACRO>
<NAME>ANACONDA_IS_STANDALONE_WINDOW_CLASS</NAME>
#define ANACONDA_IS_STANDALONE_WINDOW_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), ANACONDA_TYPE_STANDALONE_WINDOW))
</MACRO>
<MACRO>
<NAME>ANACONDA_STANDALONE_WINDOW_GET_CLASS</NAME>
#define ANACONDA_STANDALONE_WINDOW_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), ANACONDA_TYPE_STANDALONE_WINDOW, AnacondaStandaloneWindowClass))
</MACRO>
<STRUCT>
<NAME>AnacondaStandaloneWindow</NAME>
struct _AnacondaStandaloneWindow {
    AnacondaBaseStandalone       parent;

    /*< private >*/
    AnacondaStandaloneWindowPrivate  *priv;
};
</STRUCT>
<STRUCT>
<NAME>AnacondaStandaloneWindowClass</NAME>
struct _AnacondaStandaloneWindowClass {
    AnacondaBaseStandaloneClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>anaconda_standalone_window_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>anaconda_standalone_window_new</NAME>
<RETURNS>GtkWidget   *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>anaconda_standalone_window_retranslate</NAME>
<RETURNS>void         </RETURNS>
AnacondaStandaloneWindow *win
</FUNCTION>
<STRUCT>
<NAME>AnacondaStandaloneWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>ANACONDA_RESOURCE_PATH</NAME>
#define ANACONDA_RESOURCE_PATH  "/org/fedoraproject/anaconda/widgets/"
</MACRO>
<FUNCTION>
<NAME>anaconda_apply_language</NAME>
<RETURNS>void  </RETURNS>
GtkLabel *label, const gchar *language
</FUNCTION>
